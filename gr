#!/usr/bin/ruby

require "tempfile"
require "readline"
require "highline"

END {
    sh("brew install gh") if `which gh`.empty?
    sh("gh auth status")

    handlers = {
        "lg" => method(:lg),
        "ft" => method(:ft),
        "pr" => method(:pr),
        "mg" => method(:mg),
        "sync" => method(:sync),
        "rebase" => method(:rebase),
        "update" => method(:update),
    }

    action, *args = *ARGV
    raise "‚ùå Usage: #{$0} <action>
Available actions: #{handlers.keys.join(", ")}" if action.nil?

    handler = handlers[action]
    unless handler.nil? then
        handler.call(action, args)
    else
        raise "‚ùå Unrecognized action `#{action}`
Available actions: #{handlers.keys.join(", ")}"
        exit 1
    end
}

def lg(action, args)
    sh("git log --decorate --graph --oneline '#{args.join(" ")}'")
end

def ft(action, args)
    tid, = args

    # Complete meta information
    if tid.nil? then
        tid = input("Enter the Jira ID")
    end
    if tid =~ /^\d+$/ then tid = "IOS-#{tid}" end
    title = input("Enter the title")
    title = title.gsub(/[^\d\w]/, '_')

    # Select base branch
    branches = remote_branches
    base = branches.sort_by { |br| `git rev-list --count origin/#{br}..head`.to_i }.first
    if base.nil? or !(input("Is your base branch `#{base}`?") =~ /^[Yy]/) then
        base = choice("Please choose the target branch", branches, default: `git branch --show-current`.chomp)
    end

    br = "#{tid}_#{title}"

    # Checking out
    dirty = !`git diff head`.empty?
    sh("git stash") if dirty
    sh("git checkout #{base}")
    sh("git rev-parse --abbrev-ref $(git branch --show-current)@{upstream}; [ $? == 0 ] && git pull")
    sh("git checkout -b #{br}")
    sh("git stash pop") if dirty

    sh("git push --set-upstream origin #{br}") if input("Push?", optional: true) =~ /^[Yy]/
end

def pr(action, args)
    draft, = args
    description = nil
    file = Tempfile.new
    begin
        # Select base branch
        branch = `git branch --show-current`.chomp
        sh("git rev-parse --abbrev-ref $(git branch --show-current)@{upstream}; [ $? == 0 ] && git pull || true")

        branches = remote_branches
        base = branches.sort_by { |br| `git rev-list --count origin/#{br}..head`.to_i }.reject { |br| br == branch }.first
        if base.nil? or !(input("Is your base branch `#{base}`?") =~ /^[Yy]/) then
            base = choice("Please choose the target branch", branches)
        end

        # Complete meta information
        matched = branch.match(/^(T\d+|IOS-\d+)_(.*)$/)
        tid, title = matched.nil? ? ["", ""] : matched.captures
        title = title.gsub(/[_\[\]]/, " ").gsub(/ (\w)/) { " #{$1.upcase}" }.strip
        File.write(file.path, "[#{tid}] #{title}

# Description:

[#{tid}]

Please include a summary of the change and which issue is fixed. 

Please also include relevant motivation and context. 

List any dependencies that are required for this change.


# Test Plan:

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce.


# Checklist:

- [x] I have performed a self-review of my own code
- [x] I have commented on my code, particularly in hard-to-understand areas
- [x] Performed thorough QA on my own code
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
""")
        loop do
            sh("vim #{file.path}")
            description = File.read(file.path)
            title = description.lines.first
            description = description.lines.to_a[2..-1].join
            break if title =~ /^\[(T\d+|IOS-\d+)\]/
            exit 1 if input("Mismatched title format. Edit again?", optional: true) =~ /^[Nn]([oO])?$/
        end
    ensure
        file.close
        file.unlink
    end

    draft = input("Draft?", optional: true) =~ /^[Yy]/

    sh("gh pr create --base '#{base}' --title '#{title.chomp}' --body='#{description.chomp.gsub(/'/, "'\"'\"'")}'#{draft ? ' --draft': ''}")
end

def mg(action, args)
    branch = `git branch --show-current`.chomp
    puts "You're merging `#{branch}`"
    pr_id = /^\d+/.match(`gh pr list | grep #{branch}`)
    labels = `gh pr view #{pr_id} | sed '4q;d' | grep labels`
    raise "‚ùå Not ready to merge; please test it before merging it" unless labels.include?('QA: Ready to Merge')
    sh("gh pr merge -s -d")
    sh("git rev-parse --abbrev-ref $(git branch --show-current)@{upstream}; [ $? == 0 ] && git pull || true")
    sh("git remote update -p")
end

def sync(action, args)
    target, = args
    branches = remote_branches
    if not branches.include?(target) then
        target = choice("Please choose the target branch", branches)
    end
    current = `git branch --show-current`.chomp
    sh("git checkout #{target}")
    sh("git rev-parse --abbrev-ref $(git branch --show-current)@{upstream}; [ $? == 0 ] && git pull || true")
    sh("git checkout #{current}")
    sh("git rev-parse --abbrev-ref $(git branch --show-current)@{upstream}; [ $? == 0 ] && git pull || true")

    success = false
    begin
        sh("git merge #{target}")
        success = true
    rescue
        puts("Command failed. You can:
1. Fix it and continue with
   $ git merge --continue

2. Abort the action with
   $ git merge --abort")
    end

    sh("git push") if success and current != target and input("Push?", optional: true) =~ /^[Yy]/
end

def rebase(action, args)
    target, = args
    branches = remote_branches
    if not branches.include?(target) then
        target = choice("Please choose the target branch", branches)
    end

    current = `git branch --show-current`.chomp
    earliest_ancestor = `git merge-base #{current} #{target}`.chomp
    ancestors = `git log --oneline --reverse #{earliest_ancestor}..#{current}`.split("\n")
    if ancestors.empty? then
        return
    end
    base_ancestor = choice("From what commit do you want to rebase to #{target}?", ancestors, default: ancestors.first[0, 10])[0, 10]

    sh("git checkout #{target}")
    sh("git rev-parse --abbrev-ref $(git branch --show-current)@{upstream}; [ $? == 0 ] && git pull || true")

    sh("git checkout #{current}")
    sh("git rev-parse --abbrev-ref $(git branch --show-current)@{upstream}; [ $? == 0 ] && git pull || true")

    sh("git rebase --onto=#{target} #{base_ancestor}~")
end

def update(action, args)
    sh("cd '#{File.expand_path(File.dirname(__FILE__))}' && git remote update && git reset --hard origin/master")
end

def remote_branches
    sh("git remote update -p")
    `git for-each-ref --format='%(refname:short)' git for-each-ref --format='%(refname:strip=3)' refs/remotes/origin/* | grep -v '^release' | grep -v '^HEAD$'`.split("\n")
end

def sh(cmd)
    puts "ü§ñ #{cmd}"
    raise "‚ùå Exit code #{$?.exitstatus}" unless system(cmd)
end

require "readline"

def input(msg, optional = false)
    value = Readline.readline("#{msg}: ").chomp
    if not optional and value.empty? then
        input(msg, optional)
    else
        value
    end
end

def choice(title, choices, default: nil)
    HighLine.new.choose do |menu|
        menu.shell = true
        menu.prompt = "#{title} (enter the option itself or its number#{default.nil? ? "" : ", or press Enter directly for default value '#{default}'"}): "
        menu.default = default
        menu.choices(*choices)
    end
end
