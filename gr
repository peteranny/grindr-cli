#!/usr/bin/ruby

require "tempfile"

END {
    handlers = {
        "lg" => method(:lg),
        "ft" => method(:ft),
        "pr" => method(:pr),
        "mg" => method(:mg),
    }

    action, *args = *ARGV
    raise "‚ùå Usage: #{$0} <action>
Available actions: #{handlers.keys.join(", ")}" if action.nil?

    handler = handlers[action]
    unless handler.nil? then
        handler.call(action, args)
    else
        raise "‚ùå Unrecognized action `#{action}`
Available actions: #{handlers.keys.join(", ")}"
        exit 1
    end
}

def lg(action, args)
    sh("git log --decorate --graph --oneline '#{args.join(" ")}'")
end

def ft(action, args)
    tid = input("Enter the Jira ID")
    if tid =~ /^\d+$/ then tid = "IOS-#{tid}" end
    title = input("Enter the title")
    title = title.gsub(/[^\d\w]/, '_')
    sh("git checkout -b #{tid}_#{title}")
end

def pr(action, args)
    description = nil
    file = Tempfile.new
    begin
        branch = `git branch --show-current`.chomp
        matched = branch.match(/^(T\d+|IOS-\d+)_(.*)$/)
        tid, title = matched.nil? ? ["", ""] : matched.captures
        if tid =~ /^T\d+$/ then
            ticket_type = :phabricator
        elsif tid =~ /^IOS-\d+$/ then
            ticket_type = :jira
        end
        title = title.gsub(/[_\[\]]/, " ").gsub(/ (\w)/) { " #{$1.upcase}" }.strip
        File.write(file.path, "[#{tid}] #{title}

# Description:

[#{ticket_type == :phabricator ? "Phabricator Ticket" : ticket_type == :jira ? "Jira Ticket" : ""}](#{ticket_type == :phabricator ? "https://grindr.phacility.com/#{tid}" : ticket_type == :jira ? "https://grindr.atlassian.net/browse/#{tid}" : ""})

Please include a summary of the change and which issue is fixed. 

Please also include relevant motivation and context. 

List any dependencies that are required for this change.


# Test Plan:

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce.


# Checklist:

- [] I have performed a self-review of my own code
- [] I have commented my code, particularly in hard-to-understand areas
- [] I have made corresponding changes to the documentation
- [] My changes generate no new warnings")

        loop do
            sh("vim #{file.path}")
            description = File.read(file.path)
            title = description.lines.first.chomp
            description = description.lines.to_a[2..-1].join.chomp
            break if title =~ /^\[(T\d+|IOS-\d+)\]/
            exit 1 if input("Mismatched title format. Edit again? (default: true)", optional: true) =~ /^[Nn]([oO])?$/
        end
    ensure
        file.close
        file.unlink
    end

    branches = `git remote update -p && git for-each-ref --format='%(refname:short)' git for-each-ref --format='%(refname:strip=3)' refs/remotes/origin/*`.split("\n").reject do |br| br =~ /^release/ end
    base = choice("Please choose the target branch", branches)

    sh("gh pr create --base '#{base}' --title '#{title}' --body='#{description.sub(/'/, '"')}'")
end

def mg(action, args)
    sh("gh pr merge -s")
    sh("git pull")
    sh("git remote update -p")
end

def sh(cmd)
    puts "ü§ñ #{cmd}"
    raise "‚ùå Exit code #{$?.exitstatus}" unless system(cmd)
end

require "readline"

def input(msg, optional = false)
    value = Readline.readline("#{msg}: ").chomp
    if not optional and value.empty? then
        input(msg, optional)
    else
        value
    end
end

require "highline"

def choice(title, choices)
    HighLine.new.choose do |menu|
        menu.shell = true
        menu.prompt = "#{title} (enter the option itself or its number): "
        menu.choices(*choices)
    end
end
